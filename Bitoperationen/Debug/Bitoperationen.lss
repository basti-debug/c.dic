
Bitoperationen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000000f8  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  00000190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000606  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000552  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ff  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000328  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003b  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h> //I/O-Systembibliothek einbinden
volatile unsigned char x,y; //globale Variablen; Speicherklasse "volatile"
volatile signed char z=-10; //...(in SRAM angelegt ; nicht wegoptimierbar)
volatile unsigned int neu = 1000;

int main(void) {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
// Vorbelegung der Variablenwerte (Defaultwerte=0)
	DDRA = 0xF0; //Datenrichtungs-Register für PortA (SFR)	
  9a:	8a e3       	ldi	r24, 0x3A	; 58
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	20 ef       	ldi	r18, 0xF0	; 240
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	x=0xAB; //SRAM Speicherzelle
  a4:	8b ea       	ldi	r24, 0xAB	; 171
  a6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
	y=0x01;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <y>
	
	while(1) //Arbeitsschleife
	{
	DDRA ^= 0xff; // 1-komplement (Alle Datenrichtungen von PortA umkehren)
  b0:	8a e3       	ldi	r24, 0x3A	; 58
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2a e3       	ldi	r18, 0x3A	; 58
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	20 95       	com	r18
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	x ^= 0xff; // 1-komplement (bitweises invertieren)
  c2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  c6:	80 95       	com	r24
  c8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
	y <<= 1; // 1 bit logisch nach links schieben
  cc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <y>
  d0:	88 0f       	add	r24, r24
  d2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <y>
	z >>= 1; // 1 bit arithmetisch nach rechts schieben
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	85 95       	asr	r24
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	neu += 2;
  e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <neu>
  e4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <neu+0x1>
  e8:	02 96       	adiw	r24, 0x02	; 2
  ea:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <neu+0x1>
  ee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <neu>
	}
  f2:	de cf       	rjmp	.-68     	; 0xb0 <main+0x1e>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
